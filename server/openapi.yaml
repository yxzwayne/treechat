openapi: 3.1.0
info:
  title: Treechat API
  description: API for Treechat - A tree-structured AI chat interface
  version: 0.1.0
servers:
  - url: http://localhost:3000
    description: Development server
paths:
  /api/conversations:
    get:
      summary: Get all conversations
      description: Returns a list of all conversations with pagination
      parameters:
        - name: limit
          in: query
          description: Maximum number of conversations to return
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          description: Number of conversations to skip
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: A list of conversations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Conversation'
    post:
      summary: Create a new conversation
      description: Creates a new conversation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                summary:
                  type: string
                  description: A summary or title for the conversation
              required: []
      responses:
        '201':
          description: Created conversation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
  
  /api/conversations/{uuid}:
    get:
      summary: Get a conversation by ID
      description: Returns a conversation by UUID
      parameters:
        - name: uuid
          in: path
          required: true
          description: UUID of the conversation to fetch
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A conversation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '404':
          description: Conversation not found
    put:
      summary: Update a conversation
      description: Updates a conversation by UUID
      parameters:
        - name: uuid
          in: path
          required: true
          description: UUID of the conversation to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                summary:
                  type: string
                  description: A summary or title for the conversation
                status:
                  type: string
                  description: The status of the conversation
                  enum: [active, archived, deleted]
              required: []
      responses:
        '200':
          description: Updated conversation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '404':
          description: Conversation not found
  
  /api/conversations/{uuid}/messages:
    get:
      summary: Get a conversation with all messages
      description: Returns a conversation by UUID with all associated messages
      parameters:
        - name: uuid
          in: path
          required: true
          description: UUID of the conversation to fetch
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A conversation with messages
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Conversation'
                  - type: object
                    properties:
                      messages:
                        type: array
                        items:
                          $ref: '#/components/schemas/Message'
        '404':
          description: Conversation not found
  
  /api/messages:
    post:
      summary: Create a new message
      description: Creates a new message and optionally generates an AI response
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                conversation_id:
                  type: string
                  format: uuid
                  description: UUID of the conversation for this message
                parent_id:
                  type: string
                  format: uuid
                  description: UUID of the parent message (for threaded replies)
                sender:
                  type: string
                  enum: [human, ai, system]
                  description: The sender of the message
                model_provider:
                  type: string
                  description: The model provider for AI messages
                content:
                  type: object
                  description: The content of the message in JSON format
                text:
                  type: string
                  description: The plain text version of the message
                generate_response:
                  type: boolean
                  description: Whether to generate an AI response to this message
                  default: false
              required:
                - sender
                - text
      responses:
        '201':
          description: Created message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '404':
          description: Conversation or parent message not found
  
  /api/messages/{uuid}:
    get:
      summary: Get a message by ID
      description: Returns a message by UUID
      parameters:
        - name: uuid
          in: path
          required: true
          description: UUID of the message to fetch
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '404':
          description: Message not found
  
  /api/messages/conversation/{conversationId}:
    get:
      summary: Get messages by conversation
      description: Returns all messages for a given conversation
      parameters:
        - name: conversationId
          in: path
          required: true
          description: UUID of the conversation
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A list of messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '404':
          description: Conversation not found
  
  /api/attachments/message/{messageId}:
    get:
      summary: Get attachments by message
      description: Returns all attachments for a given message
      parameters:
        - name: messageId
          in: path
          required: true
          description: UUID of the message
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A list of attachments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attachment'
        '404':
          description: Message not found
    post:
      summary: Create a new attachment
      description: Uploads a file and creates a new attachment for a message
      parameters:
        - name: messageId
          in: path
          required: true
          description: UUID of the message
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload
      responses:
        '201':
          description: Created attachment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
        '404':
          description: Message not found
  
  /api/attachments/{uuid}:
    get:
      summary: Get an attachment by ID
      description: Returns an attachment by UUID
      parameters:
        - name: uuid
          in: path
          required: true
          description: UUID of the attachment to fetch
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: An attachment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
        '404':
          description: Attachment not found
    delete:
      summary: Delete an attachment
      description: Deletes an attachment by UUID
      parameters:
        - name: uuid
          in: path
          required: true
          description: UUID of the attachment to delete
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Deleted attachment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
        '404':
          description: Attachment not found
  
  /api/attachments/{uuid}/file:
    get:
      summary: Get an attachment file
      description: Returns the file content of an attachment
      parameters:
        - name: uuid
          in: path
          required: true
          description: UUID of the attachment
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The attachment file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: Attachment not found
  
  /api/metrics:
    get:
      summary: Get system metrics
      description: Returns system and service metrics
      responses:
        '200':
          description: System metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  system:
                    type: object
                    properties:
                      uptime:
                        type: number
                      memory:
                        type: object
                      cpu:
                        type: object
                  services:
                    type: object
                  timestamp:
                    type: string
                    format: date-time

components:
  schemas:
    Conversation:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        summary:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, archived, deleted]
          default: active
      required:
        - uuid
        - created_at
        - updated_at
        - status
    
    Message:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        conversation_id:
          type: string
          format: uuid
        parent_id:
          type: string
          format: uuid
          nullable: true
        sender:
          type: string
          enum: [human, ai, system]
        model_provider:
          type: string
          nullable: true
        content:
          type: object
        text:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
      required:
        - uuid
        - conversation_id
        - sender
        - content
        - created_at
        - updated_at
    
    Attachment:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        message_id:
          type: string
          format: uuid
        mime_type:
          type: string
        storage:
          type: string
          enum: [local, s3]
          default: local
        path:
          type: string
        created_at:
          type: string
          format: date-time
      required:
        - uuid
        - message_id
        - created_at